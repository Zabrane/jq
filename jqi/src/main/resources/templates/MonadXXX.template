/** This code was generated using code generator:com.timestored.jq.ops.mono**/
package com.timestored.jq.ops.mono;

import com.timestored.jdb.database.SpecialValues;
import com.timestored.jdb.col.*;
import com.timestored.jq.ops.mono.BaseMonad;
import com.timestored.jq.ops.mono.Monad;
import com.timestored.jq.TypeException;
import com.timestored.jdb.database.*;
import com.timestored.jq.ops.Op;
import com.timestored.jdb.kexception.LengthException;
import com.timestored.jdb.kexception.NYIException;

public abstract class Monad##Action####ReturnType## extends BaseMonad {

    public Object run(Object o) {
        if(false) {
        ##FOReachTYPE##	
        } else if(o instanceof ##Type##) {
            return ex((##type##) o);  ##FOReachTYPE##	
        } else if(o instanceof RuntimeException) {
            return ex((RuntimeException) o);
        } else if(o instanceof Byte) {
            return ex((byte) o);
        } else if(o instanceof ByteCol) {
            return ex((ByteCol) o);
        } else if(o instanceof Month) {
            return ex((Month) o);
        } else if(o instanceof Dt) {
            return ex((Dt) o);
        } else if(o instanceof Time) {
            return ex((Time) o);
        } else if(o instanceof Second) {
            return ex((Second) o);
        } else if(o instanceof Dt) {
            return ex((Dt) o);
        } else if(o instanceof Month) {
            return ex((Month) o);
        } else if(o instanceof Timespan) {
            return ex((Timespan) o);
        } else if(o instanceof Timstamp) {
            return ex((Timstamp) o);
        } else if(o instanceof Minute) {
            return ex((Minute) o);
        } else if(o instanceof Tbl) {
            return ex((Tbl) o);
        } else if(o instanceof String) {
            return ex((String) o);
        } else if(o instanceof StringCol) {
            return ex((StringCol) o);
        } else if(o instanceof ObjectCol) {
            return ex((ObjectCol) o);
        } else if(o instanceof Mapp) {
            return ex((Mapp) o);
        } else if(o instanceof Op) {
            return ex((Op) o);
        }
        String s = "Monad " + name() + " couldn't handle: " 
        		+ (o==null ? "null" : "type " + o.getClass());
        throw new UnsupportedOperationException(s);
    }
    
    public Object ex(RuntimeException o) { throw o; }
    public Object ex(Mapp o) { return mapEach(o); }
    public Object ex(Tbl o) { return mapEach(o); }
    public Object ex(ObjectCol o) { return mapEach(o); }
	public Object ex(StringCol a) { throw new TypeException();  }
    
	public Object ex(String a) {  throw new NYIException(); }
    
    ##FOReachTYPE##	
    public abstract ##returntype## ex(##type## a);  ##FOReachTYPE## 

    public Object ex(Timstamp tm) { Object o = ex(tm.getLong()); return o instanceof Long ? new Timstamp((long)o) : o; }
    public Object ex(Timespan tm) { Object o = ex(tm.getLong()); return o instanceof Long ? new Timespan((long)o) : o; }
    public Object ex(Month tm) { Object o = ex(tm.getInt()); return o instanceof Integer ? new Month((int)o) : o; }	
    public Object ex(Dt tm) { Object o = ex(tm.getInt()); return o instanceof Integer ? new Dt((int)o) : o; }	
    public Object ex(Time tm) { Object o = ex(tm.getInt()); return o instanceof Integer ? new Time((int)o) : o; }
    public Object ex(Second tm) { Object o = ex(tm.getInt()); return o instanceof Integer ? new Second((int)o) : o; }
    public Object ex(Minute tm) { Object o = ex(tm.getInt()); return o instanceof Integer ? new Minute((int)o) : o; }
    
}