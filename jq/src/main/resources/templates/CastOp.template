package com.timestored.jq.ops;

import com.timestored.jdb.database.SpecialValues;
import com.timestored.jq.TypeException;
import com.timestored.jq.ops.mono.CountOp;

import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.Optional;

import com.timestored.jdb.col.*;
import com.timestored.jdb.database.CType;
import com.timestored.jdb.kexception.LengthException;
import com.timestored.jq.ops.mono.TypeOp;
import com.timestored.jdb.database.Minute;
import com.timestored.jdb.kexception.KException;
import com.timestored.jdb.database.*;
import com.timestored.jdb.database.Dt;
import com.timestored.jdb.database.Time;

public class CastOp extends BaseDiad {
	public static final CastOp CAST = new CastOp();
	@Override public String name() { return "$"; }
	
	
	##FOReachPAIR##	
    public ##toType## ##toTypeChar##(##fromType## from) {
        return SpecialValues.isNull(from) ? SpecialValues.n##toTypeChar## : ##toCastPre## (from ##fromCast##) ##toCastPost##;
    }
    public ##toListType## ##toTypeChar##(##fromListType## from) {
        ##toListType## r = new Memory##toListType##(from.size());
        for (int i = 0; i < from.size(); i++) {
        	##fromType## v = from.get(i);
            r.set(i, SpecialValues.isNull(v) ? SpecialValues.n##toTypeChar## : ##toCastPre## (v ##fromCast##) ##toCastPost##);
        }
        return r;
    }
	##FOReachPAIR##
	
	##FOReachTYPE## 
	public ##type## ##typeChar##(##type## b) { return b; }  ##FOReachTYPE##

	public ShortCol h(ShortCol b) { return b; } 
	public BooleanCol b(BooleanCol b) { return b; } 
	public IntegerCol i(IntegerCol b) { b.setType((short) 6); return b; } 
	public LongCol j(LongCol b) { b.setType((short) 7); return b; } 
	public FloatCol e(FloatCol b) { return b; } 
	public DoubleCol f(DoubleCol b) { b.setType((short) 9); return b; } 

	public Object run(Object a, Object b) {
		
		if(a instanceof Short) {
			short s = (short) a;
			s = (short) (s < 0 ? -s : s);
			
			if(b instanceof ObjectCol) {
				ObjectCol ba = (ObjectCol) b;
				if(ba.size() == 0) {
					return ColProvider.emptyCol(CType.getType((short) (0 - s)));
				} else {
					ObjectCol r = new MemoryObjectCol(ba.size());
					for(int i=0; i<ba.size(); i++) {
						r.set(i, run(s, ba.get(i)));
					}
					return r;
				}
			}
			
			
			if(b instanceof IntegerCol) {
				IntegerCol icb = (IntegerCol) b;
				if(icb.getType() != 6) {
					switch(s) {
					case 14: return d((IntegerCol) b);
					case 17: return u((IntegerCol) b);
					case 18: return v((IntegerCol) b);
					case 19: return t((IntegerCol) b);
					}
				}
			} else if(b instanceof LongCol) {
				LongCol icb = (LongCol) b;
				if(icb.getType() != 6) {
					switch(s) {
					case 12: return p((LongCol) b);
					case 16: return n((LongCol) b);
					}
				}
			}
			
			##FOReachTYPE##	
			if(b instanceof ##Type##) {
				switch(s) {
					case 1: return b((##type##) b);
					case 5: return h((##type##) b);
					case 6: return i((##type##) b);
					case 7: return j((##type##) b);
					case 8: return e((##type##) b);
					case 9: return f((##type##) b);
					case 10: return c(i((##type##) b));
					case 12: return p(j((##type##) b));
					case 14: return d(i((##type##) b));
					case 16: return n(j((##type##) b));
					case 17: return u(i((##type##) b));
					case 18: return v(i((##type##) b));
					case 19: return t(i((##type##) b));
				}
			}
			if(b instanceof ##listtype##) {
				switch(s) {
					case 1: return b((##listtype##) b);
					case 5: return h((##listtype##) b);
					case 6: return i((##listtype##) b);
					case 7: return j((##listtype##) b);
					case 8: return e((##listtype##) b);
					case 9: return f((##listtype##) b);
					case 10: return c(i((##listtype##) b));
					case 12: return p(j((##listtype##) b));
					case 14: return d(i((##listtype##) b));
					case 16: return n(j((##listtype##) b));
					case 17: return u(i((##listtype##) b));
					case 18: return v(i((##listtype##) b));
					case 19: return t(i((##listtype##) b));
				}
			}
			##FOReachTYPE##	
			
			
			if(b instanceof Character) {
				switch(s) {
					case 11: return ""+((char) b);
					case 6: return (int) ((char) b);
					default: return run(a, (int) ((char) b));
				}
			} else if(b instanceof CharacterCol) {
				switch(s) {
					case 11: return s((CharacterCol) b);
					case 6: return i((CharacterCol) b);
					default: return run(a, i((CharacterCol) b));
				}
			} else if(b instanceof Dt) {
				switch(s) {
					default: return run(a, ((Dt) b).getInt());
				}				
			} else if(b instanceof Time) {
				switch(s) {
					case 17: return u((Time) b);
					case 18: return v((Time) b);
					default: return run(a, ((Time) b).getInt());
				}
			} else if(b instanceof Minute) {
				switch(s) {
					case 18: return v((Minute) b);
					case 19: return t((Minute) b);
					default: return run(a, ((Minute) b).getInt());
				}
			} else if(b instanceof Second) {
				switch(s) {
					case 17: return u((Second) b);
					case 19: return t((Second) b);
					default: return run(a, ((Second) b).getInt());
				}
			} else if(b instanceof Timespan) {
				switch(s) {
				case 17: return u((Timespan) b);
				case 18: return v((Timespan) b);
				case 19: return t((Timespan) b);
				default: return run(a, ((Timespan) b).getLong());
			}
			} else if(b instanceof Timstamp) {
				switch(s) {
				case 17: return u((Timstamp) b);
				case 18: return v((Timstamp) b);
				case 19: return t((Timstamp) b);
				default: return run(a, ((Timstamp) b).getLong());
			}
			}
			
			
		}
		

		if(a instanceof ShortCol) {
			ShortCol s = (ShortCol) a;
			long c = CountOp.INSTANCE.count(b);
			boolean allSame = true;
			for(int i=1; i<s.size() && allSame; i++) {
				allSame &= s.get(i-1) == s.get(i);
			}
			if(allSame) {
				return run(s.get(0), b);
			} else if(c == s.size()) {
				throw new UnsupportedOperationException();
			} else if(c == 1) {
				Object[] r = new Object[(int)c];
				for(int i=0; i<r.length; i++) {
					r[i] = run(s.get(i), b);
				}
				return r;
			}
		} else if(a instanceof String) {
			short typeNum = (short) Math.abs(CType.getType((String) a).getTypeNum());
			return run(typeNum, b);
		} else if(a instanceof Character) {
			short typeNum = (short) Math.abs(CType.getType((char) a).getTypeNum());
			return run(typeNum, b);
		} else {
			short leftTyp = TypeOp.TYPE.type(a);
			short rightTyp = TypeOp.TYPE.type(b);
			boolean toNumericEmptyList = leftTyp >= 0 && leftTyp < 20 && CountOp.INSTANCE.count(a) == 0;
			boolean fromEmptyOrAtom = rightTyp < 0 || CountOp.INSTANCE.count(b) == 0;
			if(toNumericEmptyList) {
				if(fromEmptyOrAtom) {
					return ColProvider.emptyCol(CType.OBJECT);
				} else {
					throw new LengthException();
				}
			}
		} 
		throw new TypeException();
	}

	public IntegerCol i(CharacterCol b) {
		IntegerCol ic = new MemoryIntegerCol(b.size());
		for(int i=0; i<b.size(); i++) {
			ic.set(i, b.get(i));
		}
		return ic;
	}	
	
	public IntegerCol i(String a) {
		IntegerCol ic = new MemoryIntegerCol(a.length());
		for(int i=0; i<a.length(); i++) {
			ic.set(i, a.charAt(i));
		}
		return ic;
	}
	
	public CharacterCol c(IntegerCol b) {
		CharacterCol ic = new MemoryCharacterCol(b.size());
		for(int i=0; i<b.size(); i++) {
			ic.set(i, (char) b.get(i));
		}
		return ic;
	}

	public char c(int b) { return (char) b; }
	
	public String s(CharacterCol b) {
		StringBuilder sb = new StringBuilder(b.size());
		for(int i=0; i<b.size(); i++) {
			sb.append(b.get(i));
		}
		return sb.toString();
	}



	
	private IntegerCol d(IntegerCol i) {
		IntegerCol ni = i;
		switch(Math.abs(i.getType())) {
			case 6: ni = MulOp.INSTANCE.ex(i, 1); break;
		}
		ni.setType((short) -CType.DT.getTypeNum()); 
		return ni; 
	}
	
	private LongCol n(LongCol j) {
		j.setType((short) -CType.TIMESPAN.getTypeNum()); 
		return j; 
	}
	
	private LongCol p(LongCol j) {
		j.setType((short) -CType.TIMSTAMP.getTypeNum()); 
		return j; 
	}
	
	private IntegerCol u(IntegerCol i) {
		IntegerCol ni = i;
		switch(Math.abs(i.getType())) {
			case 6: ni = MulOp.INSTANCE.ex(i, 1); break;
			case 18: ni = DivOp.INSTANCE.ex(i, 60); break;
			case 19: ni = DivOp.INSTANCE.ex(i, 60*1000);  break;
		}
		ni.setType((short) -CType.MINUTE.getTypeNum()); 
		return ni; 
	}

	private IntegerCol v(IntegerCol i) {
		IntegerCol ni = i;
		switch(Math.abs(i.getType())) {
			case 6: ni = MulOp.INSTANCE.ex(i, 1); break;
			case 17: ni = MulOp.INSTANCE.ex(i, 60); break;
			case 19: ni = DivOp.INSTANCE.ex(i, 1000);  break;
		}
		ni.setType((short) -CType.SECOND.getTypeNum()); 
		return ni; 
	}

	private IntegerCol t(IntegerCol i) {
		IntegerCol ni = i;
		switch(Math.abs(i.getType())) {
			case 6: ni = MulOp.INSTANCE.ex(i, 1); break;
			case 17: ni = MulOp.INSTANCE.ex(i, 60*1000); break;
			case 18: ni = MulOp.INSTANCE.ex(i, 1000);  break;
		}
		ni.setType((short) -CType.TIME.getTypeNum()); 
		return ni; 
	}
	
	private Dt d(int i) { return new Dt(i); }

	private Timstamp p(long j) { return new Timstamp(j); }
	private Timespan n(long j) { return new Timespan(j); }
	
	private Minute u(int i) { return new Minute(i); }
	private Minute u(Time t) { return new Minute(t.getInt()/(60*1000)); }
	private Minute u(Second v) { return new Minute(v.getInt()/60); }
	private Minute u(Timespan v) { return u(v(v)); }
	private Minute u(Timstamp v) { return u(v(v)); }

	private Second v(int i) { return new Second(i); }
	private Second v(Time t) { return new Second(t.getInt()/1000); }
	private Second v(Minute u) { return new Second(u.getInt()*60); }
	private Second v(Timespan u) { return u.getSecond(); }
	private Second v(Timstamp u) { return u.getSecond(); }

	private Time t(int i) { return new Time(i); }
	private Time t(Minute u) { return new Time(u.getInt()*60*1000); }
	private Time t(Second v) { return new Time(v.getInt()*1000); }
	private Time t(Timespan v) { return t(v(v)); }
	private Time t(Timstamp v) { return t(v(v)); }
	

	public static Integer toInteger(Object a) {
		try {
			return (Integer) CastOp.CAST.run(CType.INTEGER.getTypeNum(), a);
		} catch(ClassCastException | KException e) { }
		return null;
	}
	public static IntegerCol toIntegerCol(Object a) {
		try {
			return (IntegerCol) CastOp.CAST.run(CType.INTEGER.getTypeNum(), a);
		} catch(ClassCastException | KException e) { }
		return null;
	}






	public int i(Object a, int defaultValOnFailure) {
		try { return intUnsafe(a).get(); } catch(NoSuchElementException e) {}
		return defaultValOnFailure;
	}
	public Optional<Integer> intUnsafe(Object a) {
		try { 
		return Optional.of((Integer) CastOp.CAST.run(CType.INTEGER.getTypeNum(), a));
		} catch(ClassCastException | TypeException e) { }
		return Optional.empty();
	}
	public Optional<IntegerCol> iColUnsafe(Object a) {
		if(a instanceof Col) {
			try { 
			return Optional.of((IntegerCol) CastOp.CAST.run(CType.INTEGER.getTypeNum(), a));
			} catch(ClassCastException | TypeException e) { }	
		}
		return Optional.empty();
	}
	
	
	public static Object flattenGenericIfSameType(ObjectCol r) {
		if(r.size() == 0 || TypeOp.TYPE.type(r) != 0) {
			return r;
		}
		short typeNum = TypeOp.TYPE.type(r.get(0));
		// Only flatten when everything atoms.
		if(typeNum >= 0) { return r; }
		boolean sameType = true;
		for (int i = 1; i < r.size(); i++) {
			if (TypeOp.TYPE.type(r.get(i)) != typeNum) {
				sameType = false;
				break;
			}
		}
		CType cType = CType.getType(typeNum);
		if(sameType && cType!=null) {
			Col c = ColProvider.getInMemory(cType, r.size());
			for (int i = 0; i < r.size(); i++) {
				c.setObject(i, r.get(i));
			}
			return c;
		}
		return r;
	}
	
	
	public StringCol s(Collection<String> sl) {
		MemoryStringCol sc = new MemoryStringCol(sl.size());
		int i = 0;
		for(String s : sl) {
			sc.set(i++, s);
		}
		return sc;
	}
}